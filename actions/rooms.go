package actions

import (

  "fmt"
  "net/http"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/obedtandadjaja/project_k_backend/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Room)
// DB Table: Plural (rooms)
// Resource: Plural (Rooms)
// Path: Plural (/rooms)
// View Template Folder: Plural (/templates/rooms/)

// RoomsResource is the resource for the Room model
type RoomsResource struct{
  buffalo.Resource
}

// List gets all Rooms. This function is mapped to the path
// GET /rooms
func (v RoomsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  rooms := &models.Rooms{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Rooms from the DB
  if err := q.All(rooms); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(http.StatusOK, r.Auto(c, rooms))
}

// Show gets the data for one Room. This function is mapped to
// the path GET /rooms/{room_id}
func (v RoomsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Room
  room := &models.Room{}

  // To find the Room the parameter room_id is used.
  if err := tx.Find(room, c.Param("room_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  return c.Render(http.StatusOK, r.Auto(c, room))
}

// Create adds a Room to the DB. This function is mapped to the
// path POST /rooms
func (v RoomsResource) Create(c buffalo.Context) error {
  // Allocate an empty Room
  room := &models.Room{}

  // Bind room to the html form elements
  if err := c.Bind(room); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(room)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(http.StatusUnprocessableEntity, r.Auto(c, room))
  }

  // and redirect to the rooms index page
  return c.Render(http.StatusCreated, r.Auto(c, room))
}

// Update changes a Room in the DB. This function is mapped to
// the path PUT /rooms/{room_id}
func (v RoomsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Room
  room := &models.Room{}

  if err := tx.Find(room, c.Param("room_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  // Bind Room to the html form elements
  if err := c.Bind(room); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(room)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(http.StatusUnprocessableEntity, r.Auto(c, room))
  }

  // and redirect to the rooms index page
  return c.Render(http.StatusOK, r.Auto(c, room))
}

// Destroy deletes a Room from the DB. This function is mapped
// to the path DELETE /rooms/{room_id}
func (v RoomsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Room
  room := &models.Room{}

  // To find the Room the parameter room_id is used.
  if err := tx.Find(room, c.Param("room_id")); err != nil {
    return c.Error(http.StatusNotFound, err)
  }

  if err := tx.Destroy(room); err != nil {
    return err
  }

  // Redirect to the rooms index page
  return c.Render(http.StatusOK, r.Auto(c, room))
}
