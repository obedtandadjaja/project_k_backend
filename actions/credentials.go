package actions

import (

  "fmt"
  "github.com/gobuffalo/buffalo"
  "github.com/gobuffalo/pop"
  "github.com/obedtandadjaja/project_k_backend/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Credential)
// DB Table: Plural (credentials)
// Resource: Plural (Credentials)
// Path: Plural (/credentials)
// View Template Folder: Plural (/templates/credentials/)

// CredentialsResource is the resource for the Credential model
type CredentialsResource struct{
  buffalo.Resource
}

// List gets all Credentials. This function is mapped to the path
// GET /credentials
func (v CredentialsResource) List(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  credentials := &models.Credentials{}

  // Paginate results. Params "page" and "per_page" control pagination.
  // Default values are "page=1" and "per_page=20".
  q := tx.PaginateFromParams(c.Params())

  // Retrieve all Credentials from the DB
  if err := q.All(credentials); err != nil {
    return err
  }

  // Add the paginator to the context so it can be used in the template.
  c.Set("pagination", q.Paginator)

  return c.Render(200, r.Auto(c, credentials))
}

// Show gets the data for one Credential. This function is mapped to
// the path GET /credentials/{credential_id}
func (v CredentialsResource) Show(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Credential
  credential := &models.Credential{}

  // To find the Credential the parameter credential_id is used.
  if err := tx.Find(credential, c.Param("credential_id")); err != nil {
    return c.Error(404, err)
  }

  return c.Render(200, r.Auto(c, credential))
}

// Create adds a Credential to the DB. This function is mapped to the
// path POST /credentials
func (v CredentialsResource) Create(c buffalo.Context) error {
  // Allocate an empty Credential
  credential := &models.Credential{}

  // Bind credential to the html form elements
  if err := c.Bind(credential); err != nil {
    return err
  }

  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Validate the data from the html form
  verrs, err := tx.ValidateAndCreate(credential)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the new.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, credential))
  }

  // and redirect to the credentials index page
  return c.Render(201, r.Auto(c, credential))
}

// Update changes a Credential in the DB. This function is mapped to
// the path PUT /credentials/{credential_id}
func (v CredentialsResource) Update(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Credential
  credential := &models.Credential{}

  if err := tx.Find(credential, c.Param("credential_id")); err != nil {
    return c.Error(404, err)
  }

  // Bind Credential to the html form elements
  if err := c.Bind(credential); err != nil {
    return err
  }

  verrs, err := tx.ValidateAndUpdate(credential)
  if err != nil {
    return err
  }

  if verrs.HasAny() {
    // Make the errors available inside the html template
    c.Set("errors", verrs)

    // Render again the edit.html template that the user can
    // correct the input.
    return c.Render(422, r.Auto(c, credential))
  }

  // and redirect to the credentials index page
  return c.Render(200, r.Auto(c, credential))
}

// Destroy deletes a Credential from the DB. This function is mapped
// to the path DELETE /credentials/{credential_id}
func (v CredentialsResource) Destroy(c buffalo.Context) error {
  // Get the DB connection from the context
  tx, ok := c.Value("tx").(*pop.Connection)
  if !ok {
    return fmt.Errorf("no transaction found")
  }

  // Allocate an empty Credential
  credential := &models.Credential{}

  // To find the Credential the parameter credential_id is used.
  if err := tx.Find(credential, c.Param("credential_id")); err != nil {
    return c.Error(404, err)
  }

  if err := tx.Destroy(credential); err != nil {
    return err
  }

  // Redirect to the credentials index page
  return c.Render(200, r.Auto(c, credential))
}
